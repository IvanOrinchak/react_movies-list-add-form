{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","currTitle","setCurrTitle","currDescription","setCurrDescription","currImgUrl","setCurrImgUrl","currImdbUrl","setCurrImdbUrl","currImdbId","setCurrImdbId","disabledButton","onSubmit","preventDefault","even","disabled","App","moviesFromServer","setMovie","newMovie","currMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8becd2b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface NewMovieProps {\n  onAdd: (details: Movie) => void;\n}\n\nexport const NewMovie:React.FC<NewMovieProps> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [currTitle, setCurrTitle] = useState('');\n  const [currDescription, setCurrDescription] = useState('');\n  const [currImgUrl, setCurrImgUrl] = useState('');\n  const [currImdbUrl, setCurrImdbUrl] = useState('');\n  const [currImdbId, setCurrImdbId] = useState('');\n\n  const disabledButton = currTitle !== ''\n  && currImgUrl !== '' && currImdbUrl !== '' && currImdbId !== '';\n\n  const handleButton = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd({\n      title: currTitle,\n      description: currDescription,\n      imgUrl: currImgUrl,\n      imdbUrl: currImdbUrl,\n      imdbId: currImdbId,\n    });\n\n    setCurrTitle('');\n    setCurrDescription('');\n    setCurrImgUrl('');\n    setCurrImdbUrl('');\n    setCurrImdbId('');\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleButton}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={currTitle}\n        onChange={(even) => setCurrTitle(even)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={currDescription}\n        onChange={(even) => setCurrDescription(even)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={currImgUrl}\n        onChange={(even) => setCurrImgUrl(even)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={currImdbUrl}\n        onChange={(even) => setCurrImdbUrl(even)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={currImdbId}\n        onChange={(even) => setCurrImdbId(even)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!disabledButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movie, setMovie] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovie(currMovie => [...currMovie, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movie} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}